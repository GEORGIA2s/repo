package study.level.high;
import java.util.*;

//상품 카테고리 Enum
enum ProductCategory {
 ELECTRONICS, CLOTHING, BOOKS
}

//상품 인터페이스
interface Product {
 String getName();
 double getPrice();
 ProductCategory getCategory();
}

//구매 가능한 상품 클래스
class AvailableProduct implements Product {
 private String name;
 private double price;
 private ProductCategory category;

 public AvailableProduct(String name, double price, ProductCategory category) {
     this.name = name;
     this.price = price;
     this.category = category;
 }

 @Override
 public String getName() {
     return name;
 }

 @Override
 public double getPrice() {
     return price;
 }

 @Override
 public ProductCategory getCategory() {
     return category;
 }
}

//할인 정책 Enum
enum DiscountPolicy {
 NO_DISCOUNT, PERCENTAGE_DISCOUNT, AMOUNT_DISCOUNT
}

//주문 인터페이스
interface Order<T extends Product> {
 void addProduct(T product, int quantity);
 double calculateTotalPrice();
 void processOrder();
}

//주문 구현 클래스
class OnlineOrder<T extends Product> implements Order<T> {
 private String orderId;
 private Map<T, Integer> productQuantities;
 private DiscountPolicy discountPolicy;

 public OnlineOrder(String orderId, DiscountPolicy discountPolicy) {
     this.orderId = orderId;
     this.productQuantities = new HashMap<>();
     this.discountPolicy = discountPolicy;
 }

 @Override
 public void addProduct(T product, int quantity) {
     int existingQuantity = productQuantities.getOrDefault(product, 0);
     productQuantities.put(product, existingQuantity + quantity);
 }

 @Override
 public double calculateTotalPrice() {
     double totalPrice = 0;

     for (Map.Entry<T, Integer> entry : productQuantities.entrySet()) {
         T product = entry.getKey();
         int quantity = entry.getValue();
         double productPrice = product.getPrice();

         switch (discountPolicy) {
             case PERCENTAGE_DISCOUNT:
                 totalPrice += (1.0 - 0.1) * productPrice * quantity; // 10% 할인
                 break;
             case AMOUNT_DISCOUNT:
                 totalPrice += Math.max(0, productPrice - 50) * quantity; // 50원 이상 구매시 50원 할인
                 break;
             default:
                 totalPrice += productPrice * quantity;
         }
     }

     return totalPrice;
 }

 @Override
 public void processOrder() {
     System.out.println("주문번호: " + orderId);
     System.out.println("주문 내역:");

     for (Map.Entry<T, Integer> entry : productQuantities.entrySet()) {
         T product = entry.getKey();
         int quantity = entry.getValue();
         System.out.println(product.getName() + ": " + quantity + "개");
     }

     System.out.println("총 가격: " + calculateTotalPrice() + "원");
     System.out.println("주문이 완료되었습니다.");
 }
}

//쇼핑 몰 서비스 클래스
class ShoppingMallService<T extends Product> {
 private List<T> availableProducts;
 private List<Order<T>> orders;

 public ShoppingMallService() {
     this.availableProducts = new ArrayList<>();
     this.orders = new ArrayList<>();
 }

 // 상품 목록에 상품 추가
 public void addProduct(T product) {
     availableProducts.add(product);
 }

 // 상품 목록 조회
 public List<T> getAvailableProducts() {
     return new ArrayList<>(availableProducts);
 }

 // 주문 생성
 public Order<T> createOrder(String orderId, DiscountPolicy discountPolicy) {
     Order<T> order = new OnlineOrder<>(orderId, discountPolicy);
     orders.add(order);
     return order;
 }

 // 주문 목록 조회
 public List<Order<T>> getOrders() {
     return new ArrayList<>(orders);
 }
}

public class ShoppingMallExample {
 public static void main(String[] args) {
     Scanner scanner = new Scanner(System.in);

     // 쇼핑 몰 서비스 생성
     ShoppingMallService<AvailableProduct> shoppingMallService = new ShoppingMallService<>();

     // 상품 목록에 상품 추가
     shoppingMallService.addProduct(new AvailableProduct("Smartphone", 1000.0, ProductCategory.ELECTRONICS));
     shoppingMallService.addProduct(new AvailableProduct("T-shirt", 20.0, ProductCategory.CLOTHING));
     shoppingMallService.addProduct(new AvailableProduct("Java Book", 40.0, ProductCategory.BOOKS));

     // 사용자에게 상품 목록 출력
     System.out.println("상품 목록:");
     List<AvailableProduct> availableProducts = shoppingMallService.getAvailableProducts();
     for (int i = 0; i < availableProducts.size(); i++) {
         AvailableProduct product = availableProducts.get(i);
         System.out.println(i + ": " + product.getName() + " - " + product.getPrice() + "원");
     }

     // 사용자에게 상품 선택
     System.out.print("상품을 선택하세요 (번호 입력): ");
     int selectedProductIndex = scanner.nextInt();

     // 상품 수량 입력
     System.out.print("수량을 입력하세요: ");
     int quantity = scanner.nextInt();

     // 할인 정책 선택
     System.out.print("할인 정책을 선택하세요 (NO_DISCOUNT, PERCENTAGE_DISCOUNT, AMOUNT_DISCOUNT): ");
     String discountPolicyInput = scanner.next();
     DiscountPolicy discountPolicy = DiscountPolicy.valueOf(discountPolicyInput);

     // 주문 생성 및 처리
     Order<AvailableProduct> order = shoppingMallService.createOrder("ORD123", discountPolicy);
     order.addProduct(availableProducts.get(selectedProductIndex), quantity);
     order.processOrder();

     // 주문 목록 조회
     List<Order<AvailableProduct>> orders = shoppingMallService.getOrders();
     System.out.println("주문 목록:");
     for (int i = 0; i < orders.size(); i++) {
         Order<AvailableProduct> orderItem = orders.get(i);
         System.out.println("주문번호: " + orderItem + ", 총 가격: " + orderItem.calculateTotalPrice() + "원");
     }
 }
}
